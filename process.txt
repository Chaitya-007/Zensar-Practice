HTTP Requests => 
1] 404 => Not Found
2] 234 => status code is an FTP server return code that indicates the server has accepted the client's security mechanism
3] 500 => Internal Server Error
4] 201 => Created
5] 200 => OK, request successfull
6] 400 => Bad Request, server is unable to process the request due to client error


1] Install Nodejs
2] Install VSCode
3] Create .gitignore
4] Create README.md
5] Create Backend folder
6] Create Frontend folder
7] cd/backend
8] npm init -y => package.json
9] type : module
10] npm i express nodemon
11] start : nodemon index.js
12] dev : nodemon index.js
13] npm i express nodemon dotenv mongoose

Url for backend will be 
localhost:5555
url will => http://localhost:5555/

Lesson 1
// Create 
app.listen(PORT,callback);

Lesson 2
// Create 
app.get(route,(req,res) => {})

Lesson 3 
// Create URl for mongodb
// add it to .env
// without quotes

mongoose
.connect(MONGODB_URI)
.then(() => {
  console.log("Connected to MongoDB");
  app.listen(PORT,callback);
})
.catch((error) => {})

// Lesson 4
create Schema
const nameOfSchema = mongoose.Schema({})
export const Book = mongoose.model('ClusterName',nameOfSchema);

// Lesson 5
Save a new book with mongoose 

// Post 
app.post(router, async (callback))
const newBook = await BookSchema.create(bookObj);
return response.status(201).send(book);

// Lesson 6
Get all books with the help of mongoose
app.get(router, async (callback))
const books = await BookSchema.find({});
return response.send(200).json(books)

// Lesson 7 
Get one book with the help of mongoose 
:id captures entire text at which it is defined,
the value is accessible in req.params.id 
app.get(/books/:id)
const book = await BookSchema.findById(id);

// Lesson 8
Update a Book with mongoose 
